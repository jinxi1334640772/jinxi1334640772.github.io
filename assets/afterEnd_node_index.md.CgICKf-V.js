import{_ as a,c as i,a3 as n,o as l}from"./js/framework-ohJJpums.js";const c=JSON.parse('{"title":"Node.js 全栈开发","description":"Node.js 核心模块和后端开发实践指南","frontmatter":{"title":"Node.js 全栈开发","description":"Node.js 核心模块和后端开发实践指南","outline":"deep"},"headers":[],"relativePath":"afterEnd/node/index.md","filePath":"afterEnd/node/index.md","lastUpdated":1751548733000}'),e={name:"afterEnd/node/index.md"};function t(r,s,h,p,k,d){return l(),i("div",null,s[0]||(s[0]=[n(`<h1>🚀 Node.js 全栈开发</h1><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时环境，让 JavaScript 可以在服务器端运行。它采用事件驱动、非阻塞 I/O 模型，使其轻量且高效。</p><div class="tip custom-block"><p class="custom-block-title">📚 学习目标</p><ul><li>掌握 Node.js 核心模块的使用</li><li>学会构建高性能的服务器应用</li><li>了解 Node.js 生态系统和最佳实践</li></ul></div><h2 id="-" tabindex="-1">🏗️ 核心模块 <a class="header-anchor" href="#-" aria-label="Permalink to &quot;🏗️ 核心模块&quot;">​</a></h2><h3 id="--1" tabindex="-1">📁 文件系统与路径 <a class="header-anchor" href="#--1" aria-label="Permalink to &quot;📁 文件系统与路径&quot;">​</a></h3><ul><li><a href="./fs">文件系统 (fs)</a> - 文件和目录操作</li><li><a href="./path">路径处理 (path)</a> - 路径字符串操作</li><li><a href="./buffer">缓冲区 (buffer)</a> - 二进制数据处理</li></ul><h3 id="--2" tabindex="-1">🌐 网络与服务器 <a class="header-anchor" href="#--2" aria-label="Permalink to &quot;🌐 网络与服务器&quot;">​</a></h3><ul><li><a href="./server">HTTP 服务器</a> - 创建 HTTP 服务器</li><li><a href="./http2">HTTP/2 协议</a> - 高性能 HTTP 协议</li></ul><h3 id="--3" tabindex="-1">🔧 进程与事件 <a class="header-anchor" href="#--3" aria-label="Permalink to &quot;🔧 进程与事件&quot;">​</a></h3><ul><li><a href="./process">进程管理 (process)</a> - 进程信息和控制</li><li><a href="./events">事件系统 (events)</a> - 事件驱动编程</li><li><a href="./stream">数据流 (stream)</a> - 流式数据处理</li></ul><h3 id="--4" tabindex="-1">🛠️ 实用工具 <a class="header-anchor" href="#--4" aria-label="Permalink to &quot;🛠️ 实用工具&quot;">​</a></h3><ul><li><a href="./module">模块系统 (module)</a> - 模块加载和管理</li><li><a href="./util">工具函数 (util)</a> - 常用工具函数</li><li><a href="./querystring">查询字符串 (querystring)</a> - URL 查询参数处理</li><li><a href="./readline">命令行交互 (readline)</a> - 交互式命令行</li></ul><h3 id="--5" tabindex="-1">🧪 测试与调试 <a class="header-anchor" href="#--5" aria-label="Permalink to &quot;🧪 测试与调试&quot;">​</a></h3><ul><li><a href="./assert">断言测试 (assert)</a> - 断言和测试</li><li><a href="./test">单元测试</a> - 测试框架和最佳实践</li></ul><h3 id="--6" tabindex="-1">🕸️ 实战项目 <a class="header-anchor" href="#--6" aria-label="Permalink to &quot;🕸️ 实战项目&quot;">​</a></h3><ul><li><a href="./reptile">网络爬虫</a> - 数据抓取和处理</li></ul><h2 id="--7" tabindex="-1">🎯 学习路径 <a class="header-anchor" href="#--7" aria-label="Permalink to &quot;🎯 学习路径&quot;">​</a></h2><h3 id="--8" tabindex="-1">初学者路线 <a class="header-anchor" href="#--8" aria-label="Permalink to &quot;初学者路线&quot;">​</a></h3><ol><li><strong>环境搭建</strong> → 安装 Node.js 和 npm</li><li><strong>模块系统</strong> → <a href="./module">模块加载</a></li><li><strong>文件操作</strong> → <a href="./fs">文件系统</a></li><li><strong>HTTP 服务</strong> → <a href="./server">创建服务器</a></li></ol><h3 id="--9" tabindex="-1">进阶路线 <a class="header-anchor" href="#--9" aria-label="Permalink to &quot;进阶路线&quot;">​</a></h3><ol><li><strong>异步编程</strong> → <a href="./events">事件和流</a></li><li><strong>性能优化</strong> → <a href="./http2">HTTP/2</a></li><li><strong>进程管理</strong> → <a href="./process">进程控制</a></li><li><strong>测试开发</strong> → <a href="./test">单元测试</a></li></ol><h3 id="--10" tabindex="-1">高级路线 <a class="header-anchor" href="#--10" aria-label="Permalink to &quot;高级路线&quot;">​</a></h3><ol><li><strong>架构设计</strong> → 微服务架构</li><li><strong>性能调优</strong> → 内存管理和监控</li><li><strong>实战项目</strong> → <a href="./reptile">网络爬虫</a></li><li><strong>生产部署</strong> → 容器化和自动化</li></ol><h2 id="--11" tabindex="-1">🔥 热门特性 <a class="header-anchor" href="#--11" aria-label="Permalink to &quot;🔥 热门特性&quot;">​</a></h2><h3 id="-i-o" tabindex="-1">⚡ 非阻塞 I/O <a class="header-anchor" href="#-i-o" aria-label="Permalink to &quot;⚡ 非阻塞 I/O&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 异步文件读取</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 程序继续执行，不会等待文件读取完成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;文件读取已启动...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="--12" tabindex="-1">🔄 事件驱动 <a class="header-anchor" href="#--12" aria-label="Permalink to &quot;🔄 事件驱动&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> EventEmitter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;events&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyEmitter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventEmitter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myEmitter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyEmitter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myEmitter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;event&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`收到事件: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myEmitter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;event&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello World!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="--13" tabindex="-1">🌊 流式处理 <a class="header-anchor" href="#--13" aria-label="Permalink to &quot;🌊 流式处理&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建可读流</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> readStream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createReadStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;input.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> writeStream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createWriteStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;output.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 管道操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">readStream.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(writeStream);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="--14" tabindex="-1">🛠️ 生态系统 <a class="header-anchor" href="#--14" aria-label="Permalink to &quot;🛠️ 生态系统&quot;">​</a></h2><h3 id="--15" tabindex="-1">📦 包管理 <a class="header-anchor" href="#--15" aria-label="Permalink to &quot;📦 包管理&quot;">​</a></h3><ul><li><strong>npm</strong> - 世界上最大的开源库生态系统</li><li><strong>yarn</strong> - 快速、可靠、安全的依赖管理工具</li><li><strong>pnpm</strong> - 快速、节省磁盘空间的包管理器</li></ul><h3 id="--16" tabindex="-1">🚀 主流框架 <a class="header-anchor" href="#--16" aria-label="Permalink to &quot;🚀 主流框架&quot;">​</a></h3><ul><li><strong>Express.js</strong> - 快速、极简的 Web 框架</li><li><strong>Koa.js</strong> - 下一代 Web 框架</li><li><strong>Nest.js</strong> - 构建高效、可扩展的 Node.js 应用</li><li><strong>Fastify</strong> - 快速且低开销的 Web 框架</li></ul><h3 id="--17" tabindex="-1">🗄️ 数据库支持 <a class="header-anchor" href="#--17" aria-label="Permalink to &quot;🗄️ 数据库支持&quot;">​</a></h3><ul><li><strong>MongoDB</strong> - 文档型数据库</li><li><strong>MySQL</strong> - 关系型数据库</li><li><strong>PostgreSQL</strong> - 开源关系型数据库</li><li><strong>Redis</strong> - 内存数据库</li></ul><h2 id="--18" tabindex="-1">🎉 最佳实践 <a class="header-anchor" href="#--18" aria-label="Permalink to &quot;🎉 最佳实践&quot;">​</a></h2><h3 id="--19" tabindex="-1">🏗️ 项目结构 <a class="header-anchor" href="#--19" aria-label="Permalink to &quot;🏗️ 项目结构&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>my-node-app/</span></span>
<span class="line"><span>├── src/</span></span>
<span class="line"><span>│   ├── controllers/</span></span>
<span class="line"><span>│   ├── models/</span></span>
<span class="line"><span>│   ├── routes/</span></span>
<span class="line"><span>│   ├── middleware/</span></span>
<span class="line"><span>│   └── utils/</span></span>
<span class="line"><span>├── tests/</span></span>
<span class="line"><span>├── docs/</span></span>
<span class="line"><span>├── package.json</span></span>
<span class="line"><span>└── README.md</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="--20" tabindex="-1">🔐 安全性 <a class="header-anchor" href="#--20" aria-label="Permalink to &quot;🔐 安全性&quot;">​</a></h3><ul><li>使用环境变量管理敏感信息</li><li>输入验证和数据清理</li><li>实施适当的身份验证和授权</li><li>定期更新依赖包</li></ul><h3 id="--21" tabindex="-1">📈 性能优化 <a class="header-anchor" href="#--21" aria-label="Permalink to &quot;📈 性能优化&quot;">​</a></h3><ul><li>使用缓存减少数据库查询</li><li>实施负载均衡</li><li>优化数据库查询</li><li>使用集群模式</li></ul><h2 id="--22" tabindex="-1">🔗 相关资源 <a class="header-anchor" href="#--22" aria-label="Permalink to &quot;🔗 相关资源&quot;">​</a></h2><ul><li><a href="https://nodejs.org/docs/" target="_blank" rel="noreferrer">Node.js 官方文档</a></li><li><a href="https://docs.npmjs.com/" target="_blank" rel="noreferrer">npm 官方文档</a></li><li><a href="https://expressjs.com/" target="_blank" rel="noreferrer">Express.js 官方文档</a></li><li><a href="https://github.com/goldbergyoni/nodebestpractices" target="_blank" rel="noreferrer">Node.js 最佳实践</a></li></ul><hr><div class="tip custom-block"><p class="custom-block-title">🎯 下一步</p><p>选择一个感兴趣的模块开始学习，建议从 <a href="./server">HTTP 服务器</a> 开始，它是后端开发的基础。</p></div>`,48)]))}const E=a(e,[["render",t]]);export{c as __pageData,E as default};
