# Cursor AI 编程助手规则配置

## 项目上下文
这是一个基于VitePress的技术文档站点项目，详细规则请参考项目根目录的 `.rules` 文件。

## Cursor 行为指令

### 🎯 核心原则
- 始终遵循项目 `.rules` 文件中定义的所有规范
- 优先考虑中文技术文档的特点和需求
- 保持代码和文档的一致性和专业性

### 📝 文档编写辅助

#### Markdown 文档
当创建或修改 `.md` 文件时：
- 遵循 `.rules` 中的文档结构规范
- 使用规范的标题层级（H1-H6）
- 代码块必须指定语言类型
- 为图片添加 `data-fancybox="gallery"` 属性
- 使用相对路径引用资源

#### 示例模板应用
```markdown
# 技术文档标题

简要描述...

## 1. 概述
## 2. 安装/配置  
## 3. 基本用法
## 4. 高级功能
## 5. 最佳实践
## 6. 常见问题
## 7. 参考资料
```

### ⚙️ 配置文件修改

#### VitePress 配置 (docs/.vitepress/config.js)
当修改配置文件时：
- 保持现有的配置结构
- 添加新页面时同步更新 `nav` 和 `sidebar` 配置
- 确保所有路径和链接正确
- 维护中文界面配置

#### 侧边栏配置格式
```javascript
{
  text: "分组名称",
  collapsed: false,
  items: [
    { text: "显示名称", link: "/路径/文件名" }
  ]
}
```

### 🔧 代码规范

#### JavaScript/TypeScript
- 使用 ES6+ 语法
- 添加必要的注释
- 遵循驼峰命名法
- 优先使用 `const` 和 `let`

#### Vue 组件
- 使用 Vue 3 Composition API
- 遵循单文件组件结构
- 保持 props 和 emits 类型安全

### 📁 文件操作指引

#### 新建文档时
1. 选择合适的目录位置：
   - `/docs/frontEnd/` - 前端技术
   - `/docs/afterEnd/` - 后端技术
   - `/docs/network/` - 网络技术
   - `/docs/tools/` - 开发工具
   - `/docs/spanEnd/` - 跨端开发
   - `/docs/performace/` - 性能优化

2. 文件命名：小写英文+连字符
3. 同步更新 `config.js` 中的导航配置

#### 图片资源处理
- 将图片放在对应文档目录下
- 命名格式：`image.png`, `image-1.png`, `image-2.png`
- 压缩图片以优化加载速度

### 🚀 Git 提交建议

当建议 Git 提交信息时，使用以下格式：
```
<type>(<scope>): <description>

[详细说明]
```

类型选择：
- `docs`: 文档更新
- `feat`: 新功能
- `fix`: 修复
- `style`: 格式调整
- `refactor`: 重构
- `perf`: 性能优化
- `chore`: 构建/工具变动

### 🔍 代码审查要点

提供代码建议时重点检查：
- [ ] 是否符合项目规范
- [ ] 链接和路径是否正确
- [ ] 中文内容是否准确
- [ ] 代码示例是否可运行
- [ ] 是否需要更新配置文件

### 🛠 常用操作提醒

#### 添加新技术文档时
1. 创建 `.md` 文件
2. 更新 `docs/.vitepress/config.js` 导航
3. 测试本地预览
4. 检查链接有效性

#### 修改现有文档时
1. 保持现有结构
2. 更新相关链接
3. 验证代码示例
4. 检查图片引用

### 📚 技术栈参考

项目使用的主要技术：
- **框架**: VitePress 1.5.0+
- **运行时**: Node.js
- **包管理**: pnpm
- **部署**: GitHub Pages/Gitee Pages
- **图片处理**: Fancybox
- **搜索**: VitePress 内置本地搜索

### 🎨 UI/UX 注意事项

- 保持界面简洁专业
- 确保移动端适配
- 优化加载性能
- 保持视觉一致性

### 🔐 安全和最佳实践

- 不要在文档中暴露敏感信息
- 使用相对路径避免链接失效
- 定期检查外部链接有效性
- 保持依赖包更新

## 响应格式要求

### 当用户询问项目相关问题时
- 优先参考 `.rules` 文件中的规范
- 提供具体可操作的建议
- 包含相关的代码示例
- 说明修改对其他文件的影响

### 当协助编写文档时
- 使用规范的 Markdown 格式
- 保持技术内容准确性
- 提供完整的使用示例
- 添加相关的参考链接

### 当修改配置文件时
- 解释修改的原因和影响
- 提供完整的配置示例
- 提醒需要同步更新的部分

---

**注意**: 以上规则与项目根目录的 `.rules` 文件配合使用，确保开发过程的一致性和质量。 