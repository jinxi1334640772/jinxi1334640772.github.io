# 🤖 Cursor AI 编程助手规则配置

> **项目类型**: VitePress 技术文档站点  
> **规则版本**: 3.0  
> **最后更新**: 2025年  
> **项目作者**: zhangjinxi

---

## 📋 项目上下文

这是一个基于 **VitePress 1.5.0+** 的大型技术文档知识库项目，包含 180+ 篇技术文档。

### 核心技术栈
- **框架**: VitePress 1.5.0 + Vue 3
- **构建工具**: Vite 5.x
- **包管理器**: pnpm 9.15.1
- **部署平台**: GitHub Pages / Gitee Pages
- **文档数量**: 180+ 篇（涵盖前端、后端、网络、工具等）

### 项目结构
```
jinxi1334640772.github.io/
├── docs/
│   ├── .vitepress/          # VitePress 配置
│   ├── frontEnd/            # 前端技术 (43篇)
│   ├── afterEnd/            # 后端技术 (22篇)
│   ├── network/             # 网络工程 (13篇)
│   ├── tools/               # 开发工具 (88篇)
│   ├── spanEnd/             # 跨端开发 (14篇)
│   ├── performace/          # 性能优化 (5篇)
│   └── public/              # 静态资源
├── package.json
├── .gitignore
├── deploy.sh                # 部署脚本
└── .cursorrules             # 本文件
```

---

## 🎯 Cursor 核心行为准则

### ✅ 核心原则

1. **规范优先**: 严格遵循本项目的编码规范和文档标准
2. **中文为主**: 所有文档、注释、提交信息均使用中文
3. **一致性**: 保持代码风格、文档格式、命名规范的一致性
4. **专业性**: 确保技术内容准确无误，代码示例可运行
5. **可维护性**: 编写清晰的注释，采用模块化设计
6. **渐进增强**: 优先编辑现有文件，避免创建重复内容

---

## 📝 文档编写规范

### Markdown 文档标准结构

创建或修改 `.md` 文件时，必须遵循以下规范：

#### ✅ 文档头部 (Front Matter)

```markdown
---
title: 文档标题（必填）
description: 简要描述文档内容，50-150字（必填）
outline: deep
---
```

#### ✅ 文档结构模板

```markdown
---
title: 技术名称使用指南
description: 深入探讨技术名称的核心特性、使用方法和最佳实践
outline: deep
---

# 📚 技术名称使用指南

简要介绍该技术的背景和核心价值（1-2段）。

::: tip 📚 本章内容
列出本文档的主要学习目标和内容概要。
:::

## 1. 概述

### 1.1 什么是 XXX
### 1.2 核心特性
### 1.3 适用场景

## 2. 安装与配置

### 2.1 环境要求
### 2.2 安装步骤
### 2.3 基础配置

## 3. 基本用法

### 3.1 快速入门
### 3.2 核心 API
### 3.3 常见示例

## 4. 高级特性

### 4.1 进阶功能
### 4.2 性能优化
### 4.3 最佳实践

## 5. 实战案例

### 5.1 案例一
### 5.2 案例二
### 5.3 案例三

## 6. 常见问题

### 6.1 问题一
### 6.2 问题二
### 6.3 调试技巧

## 7. 参考资料

- [官方文档](链接)
- [GitHub 仓库](链接)
- [相关教程](链接)

---

::: tip 🚀 继续学习
推荐下一步学习的相关内容。
:::
```

#### ✅ 代码块规范

```markdown
1. **必须指定语言类型**:
   \`\`\`javascript
   \`\`\`typescript
   \`\`\`vue
   \`\`\`bash
   
2. **添加注释说明**:
   \`\`\`javascript
   /**
    * 函数功能描述
    * @param {type} param - 参数说明
    * @returns {type} 返回值说明
    */
   function example(param) {
     // 逻辑说明
     return result;
   }
   \`\`\`

3. **提供完整示例**:
   - 包含 import 语句
   - 代码可直接运行
   - 有实际输出结果
```

#### ✅ 图片处理规范

```markdown
1. **图片位置**: 放在文档同目录下
2. **命名规范**: image.png, image-1.png, image-2.png
3. **引用格式**: 
   ![描述文字](./image.png){data-fancybox="gallery"}
4. **图片优化**: 压缩图片，建议 < 500KB
```

#### ✅ 链接引用规范

```markdown
1. **内部链接**: 使用相对路径
   [Vue 3 高级指南](/frontEnd/web/vue3-advanced)
   
2. **外部链接**: 完整 URL
   [Vue 官方文档](https://vuejs.org/)
   
3. **锚点链接**: 
   [跳转到章节](#1-概述)
```

#### ✅ 使用 Emoji 图标

```markdown
增强可读性，但要适度使用：

✅ 标题: 📚 🎯 🚀 ⚡ 💡 🔧 📝 🌟 ⭐ 🎨
✅ 提示: ::: tip 💡 提示内容 :::
✅ 警告: ::: warning ⚠️ 警告内容 :::
✅ 危险: ::: danger ❌ 危险内容 :::
✅ 列表项: - ✅ / ❌ / ⚠️ / 💡
```

---

## ⚙️ 配置文件修改规范

### 🔧 VitePress 配置 (`docs/.vitepress/config.js`)

#### ✅ 修改检查清单

- [ ] **备份**: 修改前先备份配置文件
- [ ] **格式**: 保持现有的缩进和注释格式
- [ ] **同步**: 添加新页面时同步更新 `nav` 和 `sidebar`
- [ ] **路径**: 验证所有路径正确（不含 .md 后缀）
- [ ] **测试**: 本地预览确认配置生效
- [ ] **影响**: 检查是否影响其他页面导航

#### ✅ 导航栏配置标准

```javascript
// 顶部导航 (nav)
{
  text: "🎨 前端技术",
  activeMatch: "^/frontEnd/",  // 路由匹配规则
  items: [
    { 
      text: "📝 HTML & CSS", 
      link: "/frontEnd/css/dom",  // 不包含 .md
      activeMatch: "^/frontEnd/css/" 
    }
  ]
}
```

#### ✅ 侧边栏配置标准

```javascript
// 侧边栏 (sidebar)
sidebar: {
  "/frontEnd/": [
    {
      text: "📚 分组名称",
      collapsed: false,  // false: 默认展开，true: 默认折叠
      items: [
        { 
          text: "📄 页面标题", 
          link: "/frontEnd/css/dom"  // 不包含 .md
        },
        {
          text: "📂 子分组",
          items: [
            { text: "子页面", link: "/frontEnd/css/layout" }
          ]
        }
      ]
    }
  ]
}
```

#### ⚠️ 重要规则

```javascript
1. **路径规则**:
   - 导航链接: /path/to/file (不含 .md)
   - 实际文件: docs/path/to/file.md
   - 索引文件: /path/ 自动映射到 /path/index.md

2. **activeMatch 规则**:
   - 使用正则表达式匹配路由
   - 以 ^ 开头表示从头匹配
   - 以 / 结尾表示目录匹配

3. **添加新文档流程**:
   Step 1: 创建 docs/xxx/yyy.md
   Step 2: 在 config.js 中添加侧边栏配置
   Step 3: 必要时更新顶部导航
   Step 4: pnpm dev 测试
```

---

## 💻 代码编写规范

### JavaScript/TypeScript 规范

```javascript
// ✅ 推荐写法
/**
 * 函数说明：处理用户数据
 * @param {Object} userData - 用户数据对象
 * @param {string} userData.name - 用户名
 * @param {number} userData.age - 年龄
 * @returns {Object} 处理后的数据
 * @example
 * processUserData({ name: '张三', age: 25 })
 * // 返回: { name: '张三', age: 25, timestamp: 1234567890 }
 */
const processUserData = (userData) => {
  const { name, age } = userData; // 使用解构
  
  // 优先使用 const，需要重新赋值时使用 let
  const formattedName = name.trim().toLowerCase();
  
  return {
    name: formattedName,
    age,
    timestamp: Date.now()
  };
};

// ❌ 不推荐写法
var processUserData = function(userData) {  // 避免使用 var
  var name = userData.name;                  // 避免重复访问属性
  return { name: name, age: userData.age };  // 可以使用简写
};
```

#### ✅ 编码规范

```javascript
1. **语法版本**: ES6+ (箭头函数、模板字符串、解构等)
2. **变量声明**: 优先 const > let > 避免 var
3. **命名规范**: 
   - 变量/函数: camelCase (驼峰)
   - 类/组件: PascalCase (帕斯卡)
   - 常量: UPPER_SNAKE_CASE (大写下划线)
   - 文件名: kebab-case (短横线)
4. **注释**: 使用 JSDoc 格式
5. **格式化**: 使用 Prettier 自动格式化
```

### Vue 3 组件规范

```vue
<template>
  <div class="example-component">
    <h1>{{ title }}</h1>
    <button @click="handleClick">{{ buttonText }}</button>
  </div>
</template>

<script setup>
import { ref, computed, onMounted } from 'vue';

/**
 * Props 定义
 */
const props = defineProps({
  title: {
    type: String,
    required: true,
    default: '默认标题'
  }
});

/**
 * Emits 定义
 */
const emit = defineEmits(['update', 'delete']);

/**
 * 响应式数据
 */
const count = ref(0);

/**
 * 计算属性
 */
const buttonText = computed(() => `点击次数: ${count.value}`);

/**
 * 方法定义
 */
const handleClick = () => {
  count.value++;
  emit('update', count.value);
};

/**
 * 生命周期
 */
onMounted(() => {
  console.log('组件已挂载');
});
</script>

<style scoped>
/* 使用 scoped 避免样式污染 */
.example-component {
  padding: 1rem;
}
</style>
```

#### ✅ Vue 组件规范

```
1. **API 风格**: 优先使用 Vue 3 Composition API (<script setup>)
2. **组件结构**: <template> → <script> → <style>
3. **类型安全**: 明确定义 props 和 emits
4. **命名规范**: 
   - 组件文件: PascalCase.vue
   - CSS 类名: kebab-case
5. **样式隔离**: 使用 <style scoped>
```

---

## 📁 文件操作指引

### 创建新文档

```bash
1. **选择正确的目录**:
   - /docs/frontEnd/    # 前端技术
   - /docs/afterEnd/    # 后端技术
   - /docs/network/     # 网络技术
   - /docs/tools/       # 开发工具
   - /docs/spanEnd/     # 跨端开发
   - /docs/performace/  # 性能优化

2. **文件命名**:
   - 使用 kebab-case: my-document.md
   - 使用语义化名称: vue3-advanced.md
   - 索引文件: index.md

3. **创建步骤**:
   Step 1: 创建 .md 文件
   Step 2: 添加 front matter
   Step 3: 编写文档内容
   Step 4: 更新 config.js
   Step 5: 本地预览测试
```

### 图片资源处理

```bash
1. **存放位置**: 文档同目录
2. **命名格式**: 
   - image.png
   - image-1.png
   - image-2.png
3. **优化**: 
   - 压缩图片 (< 500KB)
   - 使用 WebP 格式
   - 提供 alt 描述
```

### 删除文档

```bash
1. **删除文件**: rm docs/path/to/file.md
2. **更新配置**: 从 config.js 中移除引用
3. **检查链接**: 搜索其他文档中的引用
4. **测试**: 确保没有 404 链接
```

---

## 🚀 Git 提交规范

### Commit Message 格式

```bash
<type>(<scope>): <description>

[可选的详细说明]

[可选的 footer]
```

### Type 类型

```
✅ docs:     文档更新（最常用）
✅ feat:     新功能
✅ fix:      修复问题
✅ style:    格式调整（不影响功能）
✅ refactor: 重构代码
✅ perf:     性能优化
✅ test:     测试相关
✅ chore:    构建/工具变动
✅ revert:   回退提交
```

### 示例

```bash
# 好的提交信息
docs(vue): 添加 Vue 3 高级开发指南
feat(config): 添加 vxe-grid 文档导航
fix(link): 修复首页链接 404 问题
style(markdown): 统一代码块格式
refactor(config): 优化配置文件结构

# 不好的提交信息
update
修改文件
添加内容
fix bug
```

---

## 🔍 代码审查要点

### 提供建议时重点检查

```
✅ 文档结构
   - front matter 是否完整
   - 标题层级是否正确
   - 章节编号是否连续

✅ 代码质量
   - 代码块是否指定语言
   - 注释是否清晰完整
   - 示例是否可运行

✅ 链接有效性
   - 内部链接路径是否正确
   - 外部链接是否可访问
   - 图片引用是否正确

✅ 配置一致性
   - config.js 是否同步更新
   - 导航路径是否正确
   - 侧边栏是否有序

✅ 中文规范
   - 标点符号是否正确
   - 术语翻译是否统一
   - 语句是否通顺
```

---

## 🛠 常用操作提醒

### 添加新技术文档

```bash
1. 创建 docs/xxx/new-doc.md
2. 编写文档内容（按模板）
3. 更新 docs/.vitepress/config.js:
   - 添加到对应的 sidebar 配置
   - 必要时更新 nav 配置
4. 本地预览: pnpm dev
5. 检查链接: 点击所有导航
6. 提交代码: git commit -m "docs(xxx): 添加 xxx 文档"
```

### 修改现有文档

```bash
1. 找到文档: docs/path/to/file.md
2. 编辑内容（保持格式一致）
3. 更新相关链接（如有必要）
4. 本地预览测试
5. 提交代码: git commit -m "docs(xxx): 更新 xxx 内容"
```

### 优化配置文件

```bash
1. 备份 config.js
2. 修改配置
3. 本地测试所有导航
4. 检查是否有 404
5. 提交代码: git commit -m "chore(config): 优化配置结构"
```

---

## 📚 技术栈参考

### 项目使用的主要技术

```yaml
核心框架:
  - VitePress: 1.5.0+
  - Vue: 3.x
  - Vite: 5.x

包管理:
  - pnpm: 9.15.1

插件:
  - vitepress-plugin-diagrams: Mermaid 图表支持
  - @fancyapps/ui: 图片灯箱效果
  - markdown-it-anchor: Markdown 锚点
  - markdown-it-custom-attrs: 自定义属性

部署:
  - GitHub Pages
  - Gitee Pages
  - GitHub Actions: 自动化部署
```

---

## 🎨 UI/UX 注意事项

### 界面设计原则

```
✅ 简洁专业: 避免过度设计
✅ 一致性: 保持视觉风格统一
✅ 可访问性: 支持键盘导航、屏幕阅读器
✅ 响应式: 移动端、平板、桌面端适配
✅ 性能: 优化加载速度
✅ 主题: 支持亮色/暗色模式
```

### Emoji 使用指南

```
✅ 适度使用，增强可读性
✅ 统一风格，避免混乱
✅ 语义明确，不要滥用

推荐 Emoji:
  📚 文档  🎯 目标  🚀 快速  ⚡ 性能
  💡 提示  🔧 工具  📝 笔记  🌟 重要
  ⭐ 星标  🎨 设计  ✅ 完成  ❌ 错误
  ⚠️ 警告  💻 代码  🌐 网络  📊 数据
```

---

## 🔐 安全和最佳实践

### 安全注意事项

```
❌ 不要在文档中暴露:
   - API 密钥
   - 敏感配置
   - 私人信息
   - 内部 IP
   - 数据库密码

✅ 链接维护:
   - 使用相对路径（内部链接）
   - 定期检查外部链接
   - 避免链接失效

✅ 代码示例:
   - 使用示例数据
   - 避免真实凭证
   - 添加安全注释
```

---

## 🎯 响应格式要求

### 当用户询问问题时

```
1. 优先参考本 .cursorrules 文件
2. 提供具体可操作的建议
3. 包含相关的代码示例
4. 说明修改对其他文件的影响
5. 推荐最佳实践
```

### 当协助编写文档时

```
1. 使用标准的 Markdown 格式
2. 包含完整的 front matter
3. 保持技术内容准确性
4. 提供完整的使用示例
5. 添加相关的参考链接
```

### 当修改配置文件时

```
1. 解释修改的原因和影响
2. 提供完整的配置示例
3. 提醒需要同步更新的部分
4. 建议本地测试方法
```

---

## 📊 项目质量指标

### 代码质量要求

```
✅ 可读性: 代码清晰，注释完整
✅ 可维护性: 结构合理，易于修改
✅ 一致性: 风格统一，规范遵循
✅ 文档化: JSDoc 完整，示例充分
✅ 测试性: 代码可测试，示例可运行
```

### 文档质量要求

```
✅ 准确性: 技术内容准确无误
✅ 完整性: 覆盖核心知识点
✅ 实用性: 提供可运行示例
✅ 时效性: 跟进技术更新
✅ 可读性: 结构清晰，易于理解
```

---

## 🌟 特殊说明

### 这是一个高质量的技术文档项目

```
✅ 内容全面: 180+ 篇技术文档
✅ 质量优秀: 代码规范，注释详细
✅ 持续更新: 跟进最新技术
✅ 开源免费: 惠及开发者社区

请始终保持高标准，确保每一次修改都能提升项目质量！
```

---

## 📝 快速参考

### 常用命令

```bash
# 开发
pnpm dev              # 启动开发服务器
pnpm build            # 构建生产版本
pnpm preview          # 预览构建结果

# Git
git status            # 查看状态
git add .             # 添加所有更改
git commit -m "msg"   # 提交更改
git push              # 推送到远程

# 部署
bash deploy.sh        # 执行部署脚本
```

### 常用路径

```
配置文件: docs/.vitepress/config.js
首页: docs/home.md
简历: docs/index.md
规则: .cursorrules
部署: deploy.sh
```

---

**注意**: 以上规则与项目根目录的 `.rules` 文件、`PROJECT_REVIEW.md` 配合使用，确保开发过程的一致性和质量。

**最后更新**: 2025年  
**维护者**: zhangjinxi  
**联系方式**: [GitHub](https://github.com/jinxi1334640772)